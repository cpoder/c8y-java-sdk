package org.cpo.c8y.model;

import java.time.OffsetDateTime;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;

import jakarta.annotation.Generated;

/**
 * Statistics file metadata.
 */

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-07-06T17:39:27.903333885+02:00[Europe/Paris]", comments = "Generator version: 7.7.0")
public class StatisticsFile {

  private String id;

  private String instanceName;

  private OffsetDateTime generationDate;

  private OffsetDateTime dateFrom;

  private OffsetDateTime dateTo;

  /**
   * The type of statistics: * REAL - generated by the system on the first day of
   * the month and including statistics from the previous month. * TEST -
   * generated by the user with a time range specified in the query parameters
   * (`dateFrom`, `dateTo`).
   */
  public enum TypeEnum {
    REAL("REAL"),

    TEST("TEST");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  private TypeEnum type;

  public StatisticsFile id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier of the file.
   * 
   * @return id
   */

  @JsonProperty("id")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public StatisticsFile instanceName(String instanceName) {
    this.instanceName = instanceName;
    return this;
  }

  /**
   * Domain name where the statistics file come from.
   * 
   * @return instanceName
   */

  @JsonProperty("instanceName")
  public String getInstanceName() {
    return instanceName;
  }

  public void setInstanceName(String instanceName) {
    this.instanceName = instanceName;
  }

  public StatisticsFile generationDate(OffsetDateTime generationDate) {
    this.generationDate = generationDate;
    return this;
  }

  /**
   * File generation date.
   * 
   * @return generationDate
   */

  @JsonProperty("generationDate")
  public OffsetDateTime getGenerationDate() {
    return generationDate;
  }

  public void setGenerationDate(OffsetDateTime generationDate) {
    this.generationDate = generationDate;
  }

  public StatisticsFile dateFrom(OffsetDateTime dateFrom) {
    this.dateFrom = dateFrom;
    return this;
  }

  /**
   * Start date or date and time of the statistics attached in the file.
   * 
   * @return dateFrom
   */

  @JsonProperty("dateFrom")
  public OffsetDateTime getDateFrom() {
    return dateFrom;
  }

  public void setDateFrom(OffsetDateTime dateFrom) {
    this.dateFrom = dateFrom;
  }

  public StatisticsFile dateTo(OffsetDateTime dateTo) {
    this.dateTo = dateTo;
    return this;
  }

  /**
   * End date or date and time of the statistics attached in the file.
   * 
   * @return dateTo
   */

  @JsonProperty("dateTo")
  public OffsetDateTime getDateTo() {
    return dateTo;
  }

  public void setDateTo(OffsetDateTime dateTo) {
    this.dateTo = dateTo;
  }

  public StatisticsFile type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of statistics: * REAL - generated by the system on the first day of
   * the month and including statistics from the previous month. * TEST -
   * generated by the user with a time range specified in the query parameters
   * (`dateFrom`, `dateTo`).
   * 
   * @return type
   */

  @JsonProperty("type")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatisticsFile statisticsFile = (StatisticsFile) o;
    return Objects.equals(this.id, statisticsFile.id) &&
        Objects.equals(this.instanceName, statisticsFile.instanceName) &&
        Objects.equals(this.generationDate, statisticsFile.generationDate) &&
        Objects.equals(this.dateFrom, statisticsFile.dateFrom) &&
        Objects.equals(this.dateTo, statisticsFile.dateTo) &&
        Objects.equals(this.type, statisticsFile.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, instanceName, generationDate, dateFrom, dateTo, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatisticsFile {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instanceName: ").append(toIndentedString(instanceName)).append("\n");
    sb.append("    generationDate: ").append(toIndentedString(generationDate)).append("\n");
    sb.append("    dateFrom: ").append(toIndentedString(dateFrom)).append("\n");
    sb.append("    dateTo: ").append(toIndentedString(dateTo)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
