package org.cpo.c8y.model;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;

import org.openapitools.jackson.nullable.JsonNullable;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;

import jakarta.annotation.Generated;
import jakarta.validation.constraints.NotNull;

/**
 * RealtimeNotification
 */

@JsonTypeName("realtimeNotification")
@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-07-06T17:39:27.903333885+02:00[Europe/Paris]", comments = "Generator version: 7.7.0")
public class RealtimeNotification {

  private RealtimeNotificationAdvice advice;

  /**
   * The channel name as a URI.
   */
  public enum ChannelEnum {
    HANDSHAKE("/meta/handshake"),

    SUBSCRIBE("/meta/subscribe"),

    UNSUBSCRIBE("/meta/unsubscribe"),

    CONNECT("/meta/connect"),

    DISCONNECT("/meta/disconnect");

    private String value;

    ChannelEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ChannelEnum fromValue(String value) {
      for (ChannelEnum b : ChannelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  private ChannelEnum channel;

  private String clientId;

  private String connectionType;

  private JsonNullable<Object> data = JsonNullable.<Object>undefined();

  private String error;

  private RealtimeNotificationExt ext;

  private String id;

  private String minimumVersion;

  private String subscription;

  private Boolean successful;

  private List<String> supportedConnectionTypes = new ArrayList<>();

  private String version;

  public RealtimeNotification() {
    super();
  }

  /**
   * Constructor with only required parameters
   */
  public RealtimeNotification(ChannelEnum channel) {
    this.channel = channel;
  }

  public RealtimeNotification advice(RealtimeNotificationAdvice advice) {
    this.advice = advice;
    return this;
  }

  /**
   * Get advice
   * 
   * @return advice
   */

  @JsonProperty("advice")
  public RealtimeNotificationAdvice getAdvice() {
    return advice;
  }

  public void setAdvice(RealtimeNotificationAdvice advice) {
    this.advice = advice;
  }

  public RealtimeNotification channel(ChannelEnum channel) {
    this.channel = channel;
    return this;
  }

  /**
   * The channel name as a URI.
   * 
   * @return channel
   */
  @NotNull

  @JsonProperty("channel")
  public ChannelEnum getChannel() {
    return channel;
  }

  public void setChannel(ChannelEnum channel) {
    this.channel = channel;
  }

  public RealtimeNotification clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Unique client ID generated by the server during handshake. Required for all
   * other operations.
   * 
   * @return clientId
   */

  @JsonProperty("clientId")
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }

  public RealtimeNotification connectionType(String connectionType) {
    this.connectionType = connectionType;
    return this;
  }

  /**
   * Selected connection type.
   * 
   * @return connectionType
   */

  @JsonProperty("connectionType")
  public String getConnectionType() {
    return connectionType;
  }

  public void setConnectionType(String connectionType) {
    this.connectionType = connectionType;
  }

  public RealtimeNotification data(Object data) {
    this.data = JsonNullable.of(data);
    return this;
  }

  /**
   * List of notifications from the channel.
   * 
   * @return data
   */

  @JsonProperty("data")
  public JsonNullable<Object> getData() {
    return data;
  }

  public void setData(JsonNullable<Object> data) {
    this.data = data;
  }

  public RealtimeNotification error(String error) {
    this.error = error;
    return this;
  }

  /**
   * Operation failure reason (only present if the operation was not successful).
   * 
   * @return error
   */

  @JsonProperty("error")
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }

  public RealtimeNotification ext(RealtimeNotificationExt ext) {
    this.ext = ext;
    return this;
  }

  /**
   * Get ext
   * 
   * @return ext
   */

  @JsonProperty("ext")
  public RealtimeNotificationExt getExt() {
    return ext;
  }

  public void setExt(RealtimeNotificationExt ext) {
    this.ext = ext;
  }

  public RealtimeNotification id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of the message passed in a request. Required to match the response
   * message.
   * 
   * @return id
   */

  @JsonProperty("id")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public RealtimeNotification minimumVersion(String minimumVersion) {
    this.minimumVersion = minimumVersion;
    return this;
  }

  /**
   * Minimum server-side Bayeux protocol version required by the client (in a
   * request) or minimum client-side Bayeux protocol version required by the
   * server (in a response).
   * 
   * @return minimumVersion
   */

  @JsonProperty("minimumVersion")
  public String getMinimumVersion() {
    return minimumVersion;
  }

  public void setMinimumVersion(String minimumVersion) {
    this.minimumVersion = minimumVersion;
  }

  public RealtimeNotification subscription(String subscription) {
    this.subscription = subscription;
    return this;
  }

  /**
   * Name of the channel to subscribe to. Subscription channels are available for
   * [Alarms](#tag/Alarm-notification-API), [Device
   * control](#tag/Device-control-notification-API),
   * [Events](#tag/Event-notification-API),
   * [Inventory](#tag/Inventory-notification-API) and
   * [Measurements](#tag/Measurement-notification-API).
   * 
   * @return subscription
   */

  @JsonProperty("subscription")
  public String getSubscription() {
    return subscription;
  }

  public void setSubscription(String subscription) {
    this.subscription = subscription;
  }

  public RealtimeNotification successful(Boolean successful) {
    this.successful = successful;
    return this;
  }

  /**
   * Indicates if the operation was successful.
   * 
   * @return successful
   */

  @JsonProperty("successful")
  public Boolean getSuccessful() {
    return successful;
  }

  public void setSuccessful(Boolean successful) {
    this.successful = successful;
  }

  public RealtimeNotification supportedConnectionTypes(List<String> supportedConnectionTypes) {
    this.supportedConnectionTypes = supportedConnectionTypes;
    return this;
  }

  public RealtimeNotification addSupportedConnectionTypesItem(String supportedConnectionTypesItem) {
    if (this.supportedConnectionTypes == null) {
      this.supportedConnectionTypes = new ArrayList<>();
    }
    this.supportedConnectionTypes.add(supportedConnectionTypesItem);
    return this;
  }

  /**
   * Connection types supported by both client and server, that is, intersection
   * between client and server options.
   * 
   * @return supportedConnectionTypes
   */

  @JsonProperty("supportedConnectionTypes")
  public List<String> getSupportedConnectionTypes() {
    return supportedConnectionTypes;
  }

  public void setSupportedConnectionTypes(List<String> supportedConnectionTypes) {
    this.supportedConnectionTypes = supportedConnectionTypes;
  }

  public RealtimeNotification version(String version) {
    this.version = version;
    return this;
  }

  /**
   * [Bayeux
   * protocol](https://docs.cometd.org/current/reference/#_concepts_bayeux_protocol)
   * version used by the client (in a request) or server (in a response).
   * 
   * @return version
   */

  @JsonProperty("version")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RealtimeNotification realtimeNotification = (RealtimeNotification) o;
    return Objects.equals(this.advice, realtimeNotification.advice) &&
        Objects.equals(this.channel, realtimeNotification.channel) &&
        Objects.equals(this.clientId, realtimeNotification.clientId) &&
        Objects.equals(this.connectionType, realtimeNotification.connectionType) &&
        equalsNullable(this.data, realtimeNotification.data) &&
        Objects.equals(this.error, realtimeNotification.error) &&
        Objects.equals(this.ext, realtimeNotification.ext) &&
        Objects.equals(this.id, realtimeNotification.id) &&
        Objects.equals(this.minimumVersion, realtimeNotification.minimumVersion) &&
        Objects.equals(this.subscription, realtimeNotification.subscription) &&
        Objects.equals(this.successful, realtimeNotification.successful) &&
        Objects.equals(this.supportedConnectionTypes, realtimeNotification.supportedConnectionTypes) &&
        Objects.equals(this.version, realtimeNotification.version);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(advice, channel, clientId, connectionType, hashCodeNullable(data), error, ext, id,
        minimumVersion, subscription, successful, supportedConnectionTypes, version);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[] { a.get() }) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RealtimeNotification {\n");
    sb.append("    advice: ").append(toIndentedString(advice)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    connectionType: ").append(toIndentedString(connectionType)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    ext: ").append(toIndentedString(ext)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    minimumVersion: ").append(toIndentedString(minimumVersion)).append("\n");
    sb.append("    subscription: ").append(toIndentedString(subscription)).append("\n");
    sb.append("    successful: ").append(toIndentedString(successful)).append("\n");
    sb.append("    supportedConnectionTypes: ").append(toIndentedString(supportedConnectionTypes)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
